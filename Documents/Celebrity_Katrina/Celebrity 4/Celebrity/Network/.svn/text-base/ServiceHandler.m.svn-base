//
//
//  Copyright 2010 __MyCompanyName__. All rights reserved.
//

#import "ServiceHandler.h"
#import "ConnectionManager.h"
#import "SharedObjects.h"
#import "DataModelEntities.h"
#import "JSON.h"
#import "CelebrityAppDelegate.h"
#import "Constants.h"
#import "DebugOutput.h"

@implementation ServiceHandler

@synthesize callBackTarget;
@synthesize callBackSelector;


-(void) callService:(NSString*) service withPostData: (NSDictionary*) postParams callbackTarget: (id)callBackTargetMethod callbackSelector: (SEL)callBackSelectorMethod
{
	self.callBackTarget = callBackTargetMethod;
	
	self.callBackSelector = callBackSelectorMethod;
	
    NSString* urlString = [NSString stringWithFormat:@"%@%@",kServerUrl,service];
    NSMutableString* postData = [[NSMutableString alloc] init];
    for (NSString* key in [postParams keyEnumerator]) 
    {
        NSString* value = [postParams valueForKey:key];
        
        NSString* keyvalue = [NSString stringWithFormat:@"&%@=%@",key,value];
        [postData appendString:keyvalue];
        //NSLog(keyvalue);
    }
    
    [[ConnectionManager sharedConnections] serviceCallWithURL:urlString 
                                                     httpBody:postData 
                                                   httpMethod:@"POST" 
                                               callBackTarget:self 
                                             callBackSelector:@selector(serviceDone:) 
                                                   callBackID:[[ConnectionManager sharedConnections] getCallbackID]];
    
    [postData release];
}

-(void) serviceDone:(NSMutableDictionary*) responseDataDict
{
	NSData *responseData = [responseDataDict objectForKey:kConnectionDataReceived];
	
	NSString *responseResultString = [[NSString alloc] initWithData:responseData encoding:NSUTF8StringEncoding];
    debug(@"%@",responseResultString);
	
	NSDictionary *configResponse = nil;    
    responseData = nil;
    
    SBJsonParser *jsonParser = [SBJsonParser new];
    
    // Parse the JSON into an Object	
    id data = [jsonParser objectWithString:responseResultString];
    
    [responseResultString release];
    responseResultString = nil;
    
    if(data != nil)
	{	
		configResponse = [NSDictionary dictionaryWithDictionary:(NSDictionary*)data];		
	}
	else 
    {
        debug(@"Json Parse Error: %@",[jsonParseError localizedDescription]);
		NSDictionary *errDictionary = [NSDictionary dictionaryWithObject:@"noresponse" forKey:@"error"];		
		configResponse = errDictionary;
	}
    
    //Release SBJSon Object
    [jsonParser release];
    jsonParser = nil;
	
	[self.callBackTarget performSelectorOnMainThread:self.callBackSelector withObject:configResponse waitUntilDone:NO];	
}

-(void) twitterService:(id)callBackTargetMethod: (SEL)callBackSelectorMethod
{
	self.callBackTarget = callBackTargetMethod;
	
	self.callBackSelector = callBackSelectorMethod;
    
    CelebrityAppDelegate *delegate = (CelebrityAppDelegate*)[[UIApplication sharedApplication] delegate];

    if ([delegate isNetworkAvailable]) {

        //screen_name=trishtrashers //user_timeline
        NSString *urlString = @"http://api.twitter.com/1/statuses/user_timeline/trishtrashers.json?include_rts=1&count=100&page=1";
        
        [[ConnectionManager sharedConnections] serviceCallWithURL:urlString 
                                                         httpBody:@"" 
                                                       httpMethod:@"GET" 
                                                   callBackTarget:self 
                                                 callBackSelector:@selector(twitterServiceDone:) 
                                                       callBackID:[[ConnectionManager sharedConnections] getCallbackID]];

    }
    else {
    
        // no network message
        UIAlertView *networkAlert1 = [[UIAlertView alloc] initWithTitle:nil 
                                                                message:kNoNetworkErr 
                                                               delegate:nil 
                                                      cancelButtonTitle:@"OK" 
                                                      otherButtonTitles:nil];
        
        [networkAlert1 show];
        
        [networkAlert1 release];
    }
}

-(void) twitterServiceDone:(NSMutableDictionary*) responseDataDict
{
	NSData *responseData = [responseDataDict objectForKey:kConnectionDataReceived];
	
	NSString *string = [[NSString alloc] initWithData:responseData encoding:NSUTF8StringEncoding];
	
	NSMutableArray *twitterResponse;
	
	NSString *responseResultString = [[NSString alloc] initWithData:responseData encoding:NSUTF8StringEncoding];
    
    responseData = nil;
    SBJsonParser *jsonParser = [SBJsonParser new];
    
    // Parse the JSON into an Object		
    id data = [jsonParser objectWithString:responseResultString];
    
    [responseResultString release];
    responseResultString = nil;
    
    //Release SBJSon Object
    [jsonParser release];
    jsonParser = nil;
    
    //Pass the obtained config response to the callback target(launch flow). The data parsing will be done there
    //after version check and other criterias
    twitterResponse = [NSMutableArray arrayWithArray:(NSArray*)data];
    
	[string release];
	
	[self.callBackTarget performSelectorOnMainThread:self.callBackSelector withObject:twitterResponse waitUntilDone:NO];	
}

- (void) callVideosService:(id)callBackTargetMethod: (SEL)callBackSelectorMethod :(NSString*) playlistId {
    
    self.callBackTarget = callBackTargetMethod;
	
	self.callBackSelector = callBackSelectorMethod;
	
    NSString *urlString = [NSString stringWithFormat:@"https://gdata.youtube.com/feeds/api/playlists/%@",playlistId];
    
    CelebrityAppDelegate *delegate = (CelebrityAppDelegate*)[[UIApplication sharedApplication] delegate];
    
    if ([delegate isNetworkAvailable]) {

        [[ConnectionManager sharedConnections] serviceCallWithURL:urlString 
                                                         httpBody:[NSString stringWithFormat:@"v=2&alt=jsonc&max-results=50"] 
                                                       httpMethod:@"GET" 
                                                   callBackTarget:self 
                                                 callBackSelector:@selector(callVideosServiceDone:) 
                                                       callBackID:[[ConnectionManager sharedConnections] getCallbackID]];

    }
    else {
    
        // no network message
        UIAlertView *networkAlert1 = [[UIAlertView alloc] initWithTitle:nil 
                                                                message:kNoNetworkErr 
                                                               delegate:nil 
                                                      cancelButtonTitle:@"OK" 
                                                      otherButtonTitles:nil];
        
        [networkAlert1 show];
        
        [networkAlert1 release];
    }
}

- (void) callVideosServiceDone:(NSMutableDictionary*) responseDataDict {
    
    NSData *responseData = [responseDataDict objectForKey:kConnectionDataReceived];
	
	NSString *string = [[NSString alloc] initWithData:responseData encoding:NSUTF8StringEncoding];
	
	NSMutableDictionary *videoServiceResponse;
	
    if ([string length] > 0) {
        
        NSString *responseResultString = [[NSString alloc] initWithData:responseData encoding:NSUTF8StringEncoding];
        
        SBJsonParser *jsonParser = [SBJsonParser new];
        
        // Parse the JSON into an Object		
        id data = [jsonParser objectWithString:responseResultString];
        
        [responseResultString release];
        responseResultString = nil;
        
        //Release SBJSon Object
        [jsonParser release];
        jsonParser = nil;
        
        if (nil != data) {
            
            videoServiceResponse = [NSMutableDictionary dictionaryWithDictionary:(NSDictionary*)data];
            
            [[SharedObjects sharedInstance] updateVideos:videoServiceResponse];
            
            [self.callBackTarget performSelectorOnMainThread:self.callBackSelector withObject:nil waitUntilDone:NO];	
        }
        else {
            
            NSDictionary *errorDict = [NSDictionary dictionaryWithObject:@"Parse error occured" forKey:@"Error"];
            
            [self.callBackTarget performSelectorOnMainThread:self.callBackSelector withObject:errorDict waitUntilDone:NO];	
        }
    }
    else
	{
		NSDictionary *errorDict = [NSDictionary dictionaryWithObject:@"Network error occured" forKey:@"Error"];
		
		[self.callBackTarget performSelectorOnMainThread:self.callBackSelector withObject:errorDict waitUntilDone:NO];        
	}
	
	[string release];
}

@end
